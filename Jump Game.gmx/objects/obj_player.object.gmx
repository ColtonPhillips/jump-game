<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_larry</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>obj_moveable</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>chince_flag = true;
just_shot = false;
image_speed = 0.1;
flip = false;

event_inherited();

S_GRAVITY       = 0.5;      //Accel. due to gravity (pixels/step*step)
S_RUN_ACCEL     = 0.042;      //Accel. from running on ground (pixels/step*step)
S_RUN_FRIC      = 0.08;      //Friction on the ground (pixels/step*step)
S_AIR_ACCEL     = 0.1;      //Accel. from running in the air (pixels/step*step)
S_AIR_FRIC      = 0.01;      //Friction in the air (pixels/step*step)
S_JUMP_SPEED    = -5.1;
S_MAX_H         = 1.6;        //Max horizontal speed
S_MAX_V         = 5;        //Max vertical speed
S_SLOPE_SLOW    = 0.05;      //Decceleration while climbing slopes
S_JUMP_HOLD     = 0.3;

gamepad_set_axis_deadzone(0,0.2);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (y&gt;room_height) {move_to_start();}
// DEBUG STUFF
if (keyboard_check_pressed(ord('R'))){game_restart();}
if (keyboard_check_pressed(ord('A'))){x--;}
if (keyboard_check_pressed(ord('D'))){x++;}
if (keyboard_check_pressed(ord('W'))){y--;}
if (keyboard_check_pressed(ord('S'))){y++;}

// ACCEL AND FRICTION
var accel, fric;
if (on_ground) {
    accel = S_RUN_ACCEL;
    fric = S_RUN_FRIC;
} else {
    accel = S_AIR_ACCEL;
    fric = S_AIR_FRIC;
}

// FIREBALL SYSTEM
if (gamepad_button_check_pressed(0,gp_face3) &amp;&amp; instance_number(obj_fireball) &lt; 3) {
    var fb = instance_create(x,y ,obj_fireball);
    with (fb) {
        hspd = 1.5 * other.hspd;
        vspd = 1.1 * other.vspd;
    }
}
if (abs(gamepad_axis_value(0,gp_axisrh)) &gt; 0.5 || abs(gamepad_axis_value(0,gp_axisrv)) &gt; 0.5) {
    if (!just_shot &amp;&amp; instance_number(obj_fireball) &lt; 3) {
    just_shot = true;
        var fb = instance_create(x,y,obj_fireball);
        with (fb) {
            var _dir = point_direction(0, 0, gamepad_axis_value(0,gp_axisrh), gamepad_axis_value(0,gp_axisrv))
            hspd = lengthdir_x(3,_dir);
            vspd = lengthdir_y(3,_dir);
        }
    }
}
else {
    just_shot = false;
}


// HOLD RUNNING
var my_max = S_MAX_H;
if (gamepad_button_check(0,gp_face3) || gamepad_button_value(0,gp_shoulderrb) &gt; 0) {
    my_max = S_MAX_H*2;
}
else {
    my_max = S_MAX_H;
}

// MOVEMENT
if (gamepad_axis_value(0,gp_axislh) &gt; 0) {
    //Running right
    flip = false;
    
    //First add friction if currently running left
    if (hspd &lt; 0)
        hspd = approach( hspd, 0, fric );
        
    hspd = approach( hspd, my_max, accel ); 

} else if (gamepad_axis_value(0,gp_axislh) &lt; 0) {
    //Running left
    flip = true    
    //First add friction if currently running right
    if (hspd &gt; 0)
        hspd = approach( hspd, 0, fric );
        
    hspd = approach( hspd, -my_max, accel ); 

} else {
    //Stopping
    hspd = approach( hspd, 0, fric );
}

// JUMP STUFF
if (on_ground) {
    //Jumping
    if (gamepad_button_check_pressed(0,gp_face1)) {
        vspd = S_JUMP_SPEED;
    }
} else {
    //Gravity
    vspd = approach( vspd, S_MAX_V, S_GRAVITY );
    if (gamepad_button_check(0,gp_face1)) {
        vspd -= S_JUMP_HOLD;
    }
}
if (!on_ground) {
    if (abs(hspd) &lt; 1 &amp;&amp; vspd &lt; 0 &amp;&amp; place_meeting_top(0,vspd,obj_floor))
    {   
        if (!place_meeting_top(-1,vspd,obj_floor)) {
            x=x-1;
            hspd = 0;
        }
        else if (!place_meeting_top(1,vspd, obj_floor)) {
            x = x+1;
            hspd = 0;
        }
        else {
            if (!place_meeting_top(-2,vspd,obj_floor)) {
                x=x-2;
                hspd = 0;
            }
            else if (!place_meeting_top(2,vspd, obj_floor)) {
                x = x+2;
                hspd = 0;
            }
            else  {
                if (!place_meeting_top(-3,vspd,obj_floor)) {
                    x=x-3;
                    hspd = 0;
                }
                else if (!place_meeting_top(3,vspd, obj_floor)) {
                    x = x+3;
                    hspd = 0;
                }
                else {
                }
            }
        }
    }
}

// BUST BLOCKS
if (!on_ground &amp;&amp; place_meeting_top(0,-1,obj_breakable)) {
    var inst;
    inst = instance_place_top(0,-1,obj_breakable);
        with (inst) {
            instance_destroy();
            }
    vspd = 0;

}

// ANIMATION SPEED
image_speed = abs(hspd) / 7;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_create(mouse_x,mouse_y,obj_goomba);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Vertical Wall Collision</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//You've collided with a wall vertically, so stop moving vertically!
vspd = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Horizontal Wall Collision</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//You've collided with a wall horizontally, so stop moving horizontally!
hspd = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (hspd == 0) {chince_flag = true; image_index = 0; }
else {
    if (chince_flag = true) {
        image_index = image_index + 1;
        chince_flag = false;
    }
}
if (!on_ground) image_index = 1;

if (!flip) draw_sprite_ext(spr_larry,image_index,x,y,1,1,0,c_white,1);
else draw_sprite_ext(spr_larry,image_index,x,y,-1,1,0,c_white,1);
//draw_bounding_box();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>8,8</point>
    <point>8,8</point>
  </PhysicsShapePoints>
</object>
