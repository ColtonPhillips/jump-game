<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_arrow</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_movable</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

collider = obj_floor;

S_GRAVITY       = 0.08;      //Accel. due to gravity (pixels/step*step)
S_MAX_H         = 1.6;        //Max horizontal speed
S_MAX_V         = 4;        //Max vertical speed
S_SLOPE_SLOW    = 0.05;      //Decceleration while climbing slopes

//This variables hold the actual speed the object is travelling at
hspd = 0;
vspd = 0;

//These variables have their respective speeds added to them at each
//step.  The object is moved based on these rounded, but the un-used
//fraction of a pixel is saved for next step, so objects with a
//speed less than 1 will still gradually move.
h_counter = 0;
v_counter = 0;

//This variables holds whether the object is sitting on solid ground.
on_ground = false;

// used in end step
h = 0;
v = 0;
slope = false;
collide = false;
sign_h = 1;
sign_v = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Gravity
vspd = approach( vspd, S_MAX_V, S_GRAVITY );
if (place_meeting(x,y,obj_floor)) {vspd = 0; hspd = 0;}
fall_off_world_destroyer();

// BUG vspd just changed. never zero.
if (vspd != 0) {
        // looks good shooting right but not shooting left
        // needs to go NEGATIVE if closer to it than the other option
    var target_dir = radtodeg( arctan2(-vspd, hspd));
    //image_angle = approach(image_angle,target_dir, 10);    
    // I need to make a APPROACH CLOSEST ANGLE to prevent the errors that occur from a 0-270 
    //image_angle = (target_dir + image_angle)/2;
    
    // BUG changing the angle is preventing the moving of jumppads
  //  image_angle = target_dir;
    
    if (on_ground) { 
        hspd = approach (hspd,0,0.1);
    }
    // need to make special arrow function
    
    var inst = collision_point(x+lengthdir_x(sprite_width/2,image_angle),y+lengthdir_y(sprite_height/2,image_angle),obj_enemy,true,true);
    if (inst != noone) {
        with (inst) {
            instance_destroy();
        }
        //hspd /= 2;
        //vspd = -3;
    }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>vspd =0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hspd =0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
draw_bounding_box();
draw_set_colour(c_aqua);
draw_point(x+lengthdir_x(sprite_width/2,image_angle),y+lengthdir_y(sprite_height/2,image_angle));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>4,4</point>
    <point>4,4</point>
  </PhysicsShapePoints>
</object>
